package workshop_2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;


public class Member {
	private  String name;
	private  int iD;									
	private  String securityNumber;					// YYYYMMDD-xxxx or YYMMDD-xxxx
	public  Boat[] listOfBoats = new Boat[5]; // Limits number of boats to 5 per member.
	private int numberOfBoats;

	public Member( int inputID, String inputName, String inputSecurityNumber){
		iD = inputID;
		name = inputName;
		securityNumber = inputSecurityNumber;
		numberOfBoats = 0;
	}
	public Boat getBoat(int inputBoat){
		try{
			return listOfBoats[inputBoat];
		}catch(Exception e){
			System.err.println("Boat nr: "+inputBoat+" doesn't exist");
			return null;
		}
	}
	public void setBoat(int input, Boat inputBoat){
		listOfBoats[input] = inputBoat;
	}
	public int getNumberOfBoats() {
		return numberOfBoats;
	}
	public void addNumberOfBoats() {
		numberOfBoats++;
	}
	public String getName(){
		return name;
	}
	public int getID(){
		return iD;
	}
	public String getSecurityNumber(){
		return securityNumber;
	}

	public void setName(String nameChange) throws FileNotFoundException{
		name = nameChange;
		updateMemberFile();
	}
	public void setSecurityNumber(String securityNumberChange) throws FileNotFoundException{
		securityNumber = securityNumberChange;
		updateMemberFile();
	}

	public void manageMember(String inputName, String inputSecurityNumber) throws FileNotFoundException{
		name = inputName;
		securityNumber = inputSecurityNumber;
		updateMemberFile();	
	}
	
	public void updateMemberFile() throws FileNotFoundException{
		
		File dir = new File(iD+"");
		dir.mkdir();
	
		File file = new File(iD+"/member.txt");
		PrintWriter writer= new PrintWriter(file);
		
		writer.println(iD);
		writer.println(name);
		writer.println(securityNumber);
		writer.close();
	}

	public void writeBoatToFile(String inputType, String inputLength){
		try {
			if(validateLength(inputLength)){
				int index = nextValidBoat();
				System.out.println("index: "+index);
				listOfBoats[index] = new Boat(inputType, inputLength);
				numberOfBoats+=1;
				writeBoatToRegistry((index+1),inputType,inputLength);
			}
			else{

				throw new Exception();
			}
		} catch (Exception e) {
			System.err.println("You have reached your boat limit");
		}
	}
	public void manageBoat(int boatID, String inputType, String inputLength){

		try {
			if(validateLength(inputLength) && boatID<=numberOfBoats && boatID>=1){
				if(!inputType.equals(listOfBoats[boatID-1].getType())){
					listOfBoats[boatID-1].setType(inputType);
				}
				if(!inputLength.equals(listOfBoats[boatID-1].getLength())){
					listOfBoats[boatID-1].setLength(inputLength);
				}
				writeBoatToRegistry(boatID, listOfBoats[boatID-1].getType(),listOfBoats[boatID-1].getLength());
			}
			else{
				System.out.println("Error");
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private static Boolean validateLength(String input) {
		try{
			if( input.matches("[0-9 . ,]+")){
				return true;	
			}
			else{
				throw new Exception();
			}	
		}catch (Exception e) {
			System.err.println("Not acceptable length!");
			return false;
		}

	}
	public int nextValidBoat(){
		for (int i = 0; i < 5; i++) {
			if(listOfBoats[i]==null){
				return i;
			}
		}
		return 5;
	}
	private void writeBoatToRegistry(int boatNumber,String inputType, String inputLength) throws FileNotFoundException{
		File file = new File(iD+"/boat_"+boatNumber+".txt");
		PrintWriter writer= new PrintWriter(file);

		writer.println(boatNumber);
		writer.println(inputType);
		writer.println(inputLength);
		writer.close();
	}
	
public void deleteMember(){

		File dir = new File(iD+"");
		String[]entries = dir.list();
		for(String s: entries){
			File currentFile = new File(dir.getPath(),s);
			currentFile.delete();
		}
		dir.delete();
	
}
	
	public void deleteBoat(int inputBoatID){
		if(inputBoatID>=1 && inputBoatID <= numberOfBoats){
		File boatFile = new File(iD+"/boat_"+inputBoatID+".txt");
		boatFile.delete();
		listOfBoats[inputBoatID-1] = null;
		numberOfBoats -= 1;
		}
	}



}
