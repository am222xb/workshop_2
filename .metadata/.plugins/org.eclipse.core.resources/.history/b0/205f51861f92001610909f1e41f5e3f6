package Module;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;


public class Member {
	private  String userName;					// First and last userName of member
	private  int iD;							// ID of member
	private  String securityNumber;				// YYYYMMDD-xxxx or YYMMDD-xxxx
	private  Boat[] listOfBoats = new Boat[5];	// Limits number of boats to 5 per member, changeable if needed
	private int numberOfBoats;					// Number of boats registered by member

	public Member( int iD, String userName, String securityNumber){
		this.iD = iD;
		this.userName = userName;
		this.securityNumber = securityNumber;
		this.numberOfBoats = 0;
	}
	/**
	 * Returns a boat from members list of boats
	 * @param boatID
	 * @return boat
	 * */
	public Boat getBoat(int boatID){
		try{
			return listOfBoats[boatID-1];
		}catch(Exception e){
			return null;
		}
	}
	/**
	 * Returns all boats from member
	 * @return listOfBoats
	 * */
	public Boat[] getAllBoats(){
		return listOfBoats;
	}
	/**
	 * Adds a boat to members list of boats
	 * @param index
	 * @param boat
	 * */
	public void setBoat(int index, Boat boat){
		listOfBoats[index] = boat;
	}
	/**
	 * Returns the number of boats member has
	 * @return numberOfBoats
	 * */
	public int getNumberOfBoats() {
		return numberOfBoats;
	}
	/**
	 * Increments number of boats member has
	 * */
	public void addNumberOfBoats() {
		numberOfBoats++;
	}
	/**
	 * Returns members first and last name
	 * @return userName
	 * */
	public String getName(){
		return userName;
	}
	/**
	 * Returns members ID number
	 * @return iD
	 * */
	public int getID(){
		return iD;
	}
	public void setID(int newID){
		this.iD = newID;
	}
	/**
	 * Returns members security number
	 * @return securityNumber
	 * */
	public String getSecurityNumber(){
		return securityNumber;
	}
	/**
	 * Sets members first and last name
	 * @param newName
	 * */
	public void setName(String newName) throws FileNotFoundException{
		userName = newName;
		updateMemberFile();
	}
	/**
	 * Sets members security number
	 * @param newSecurityNumber
	 * */
	public void setSecurityNumber(String newSecurityNumber) throws FileNotFoundException{
		securityNumber = newSecurityNumber;
		updateMemberFile();
	}

	/**
	 * Updates members personal file: ID, First and last name, Security Number
	 * */
	public void updateMemberFile() throws FileNotFoundException{

		File dir = new File(iD+"");
		dir.mkdir();

		File file = new File(iD+"/member.txt");
		PrintWriter writer= new PrintWriter(file);

		writer.println(iD);
		writer.println(userName);
		writer.println(securityNumber);
		writer.close();
	}
	/**
	 * Writes members boat to file if maximum number of boats hasn't been reached
	 * @param inputType
	 * @param inputLength
	 * */
	public void addBoat(String inputType, String inputLength){
		try {
			if(validateLength(inputLength)){
				int index = nextValidBoatIndex();
				listOfBoats[index] = new Boat(inputType, inputLength);
				numberOfBoats+=1;
				writeBoatToFile((index+1),inputType,inputLength);
			}
			else{

				throw new Exception();
			}
		} catch (Exception e) {
			System.err.println("You have reached your boat limit");
		}
	}
	/**
	 * Writes members boat to file
	 * @param boatID
	 * @param inputType
	 * @param inputLength
	 * */
	private void writeBoatToFile(int boatID,String inputType, String inputLength) throws FileNotFoundException{
		File file = new File(iD+"/boat_"+boatID+".txt");
		PrintWriter writer= new PrintWriter(file);

		writer.println(boatID);
		writer.println(inputType);
		writer.println(inputLength);
		writer.close();
	}
	/**
	 * Sets new Type or Length to a members boat
	 * @param boatID
	 * @param inputType
	 * @param inputlength
	 * */
	public void manageBoat(int boatID, String inputType, String inputLength){
		try {
			if(validateLength(inputLength) && boatID<=numberOfBoats && boatID>=1){
				if(!inputType.equals(listOfBoats[boatID-1].getType())){
					listOfBoats[boatID-1].setType(inputType);
				}
				if(!inputLength.equals(listOfBoats[boatID-1].getLength())){
					listOfBoats[boatID-1].setLength(inputLength);
				}
				writeBoatToFile(boatID, listOfBoats[boatID-1].getType(),listOfBoats[boatID-1].getLength());
			}
			else{
				System.out.println("Error");
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	/**
	 * Controls if 'input' is of valid length
	 * @param inputLength
	 * */
	private Boolean validateLength(String inputLength) {
		try{
			if( inputLength.matches("[0-9 . ,]+")){
				return true;	
			}
			else{
				throw new Exception();
			}	
		}catch (Exception e) {
			System.err.println("Not acceptable length!");
			return false;
		}

	}
	/**
	 * Returns from listOfBoats next valid index to add a boat
	 * @return index
	 * */
	public int nextValidBoatIndex(){
		int index = listOfBoats.length;
		for (int i = 0; i < 5; i++) {
			if(listOfBoats[i]==null){
				index = i;
				break;
			}
		}
		return index;
	}

	/**
	 * Deletes members full repository
	 * */
	public void deleteMember(){

		File dir = new File(iD+"");
		String[]entries = dir.list();
		for(String s: entries){
			File currentFile = new File(dir.getPath(),s);
			currentFile.delete();
		}
		dir.delete();

	}
	/**
	 * Deletes chosen boat's file 
	 * @param inputBoatID
	 * */
	public void deleteBoat(int inputBoatID){
		if(inputBoatID>=1 && inputBoatID <= numberOfBoats){
			File boatFile = new File(iD+"/boat_"+inputBoatID+".txt");
			boatFile.delete();
			listOfBoats[inputBoatID-1] = null;
			numberOfBoats -= 1;
		}
	}
	/**
	 * Creates a member, calls for member to be written to file
	 * @param inputName
	 * @param inputSecurityNumber
	 * @param inputID
	 * */
	public void createMember(String inputName, String inputSecurityNumber, int inputID){
		try {
			if(validateName(inputName)&&validateSecurityNumber(inputSecurityNumber)){
				userName = inputName;
				securityNumber = inputSecurityNumber;
				iD = inputID;
				writeMemberToFile();
			}
			else{
				throw new Exception();
			}
		} catch (Exception e) {
			System.err.println("Name or Security Number are incorrect.");
		}
	}
	/**
	 * Controls security number
	 * @param securityNumber
	 * @return  Returns true if security number is valid 
	 * */
	private  boolean validateSecurityNumber(String securityNumber) {
		try{
			if(securityNumber.matches("\\d{6}-\\d{4}")||securityNumber.matches("\\d{8}-\\d{4}")){
				return true;	
			}
			else{
				throw new Exception();
			}
		} catch (Exception e) {
			System.err.println("Wrong Security Number");
			return false;
		}
	}
	/**
	 * Controls name
	 * @param name
	 * @return Returns true if name does not contain special characters or numbers
	 * */
	private  Boolean validateName(String name) {
		if( name.matches("[a-zA-Z ]+") && name.length()<30){
			return true;	
		}
		else{
			System.out.println("Wrong Name");
			return false;
		}
	}

	/**
	 * Creates directory for member, creates member file
	 * */
	private  void writeMemberToFile() throws FileNotFoundException{
		File dir = new File(iD+"");
		dir.mkdir();

		File file = new File(iD+"/member.txt");
		PrintWriter writer= new PrintWriter(file);

		writer.println(iD);
		writer.println(userName);
		writer.println(securityNumber);
		writer.close();
	}



}